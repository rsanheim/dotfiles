#!/usr/bin/env ruby

require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "base64"
  gem "faraday"
  gem "faraday-retry"
  gem "octokit"
end

require "date"
require "optparse"

class StandupNotes
  PREFIX = ":today:"
  attr_reader :args, :client, :options

  def initialize(args)
    @args = args
    @options = parse_options
    @client = Octokit::Client.new(access_token: github_token)
    @client.auto_paginate = true
  end

  def call
    puts PREFIX
    puts summary if summary
    puts

    prs.each do |pr|
      status_label = determine_status(pr)
      puts "* [#{pr.title}](#{pr.html_url}) #{status_label}"
    end
  end

  private

  def parse_options
    options = { days: 1 }
    
    OptionParser.new do |opts|
      opts.banner = "Usage: standup-notes [summary] [options]"
      
      opts.on("-d", "--days DAYS", Integer, "Number of days to look back (default: 1)") do |d|
        options[:days] = d
      end
    end.parse!(args)

    options
  end

  def summary
    args[0]
  end

  def prs
    search_query = [
      "is:pr",
      "author:#{github_username}",
      "org:doximity",
      "updated:#{date_range}",
      "draft:false",
    ].join(" ")

    @client.search_issues(search_query).items.map do |issue|
      repo_name = issue.repository_url.split('/').last(2).join('/')
      @client.pull_request(repo_name, issue.number)
    end
  end

  def date_range
    date = Date.today - options[:days]
    "#{date.iso8601}..*"
  end

  def github_token
    ENV["GITHUB_TOKEN"] || raise("Please set GITHUB_TOKEN environment variable")
  end

  def github_username
    @github_username ||= @client.user.login
  end

  def determine_status(pr)
    return "_shipped_" if pr.merged

    reviews = @client.pull_request_reviews(pr.base.repo.full_name, pr.number)
    required_reviews = get_required_reviews(pr.base.repo.full_name, pr.base.ref)
    
    approved_reviews = reviews.count { |r| r.state == "APPROVED" }
    
    if approved_reviews >= required_reviews
      # "_ready to merge_"
    else
      remaining = required_reviews - approved_reviews
      "_needs #{remaining} more review#{remaining > 1 ? 's' : ''}_"
    end
  end

  def get_required_reviews(repo, branch)
    protection = @client.branch_protection(repo, branch)
    protection.required_pull_request_reviews.required_approving_review_count
  rescue Octokit::NotFound
    1 # Default to 1 required review if branch protection not found
  end
end

StandupNotes.new(ARGV).call
